java多线程技术提供了Phaser工具类，Phaser表示“阶段器”，
用来解决控制多个线程分阶段共同完成任务的情景问题。
其作用相比CountDownLatch和CyclicBarrier更加灵活，
例如有这样的一个题目：5个学生一起参加考试，一共有三道题，要求所有学生到齐才能开始考试，
全部同学都做完第一题，学生才能继续做第二题，全部学生做完了第二题，才能做第三题，
所有学生都做完的第三题，考试才结束。
分析这个题目：这是一个多线程（5个学生）分阶段问题（考试考试、第一题做完、第二题做完、第三题做完），
所以很适合用Phaser解决这个问题。


  下面说说Phaser的高级用法，在Phaser内有2个重要状态，分别是phase和party。
  phase就是阶段，初值为0，当所有的线程执行完本轮任务，同时开始下一轮任务时，
  意味着当前阶段已结束，进入到下一阶段，phase的值自动加1。party就是线程，
  party=4就意味着Phaser对象当前管理着4个线程。Phaser还有一个重要的方法经常需要被重载，
  那就是boolean onAdvance(int phase, int registeredParties)方法。此方法有2个作用：
  1、当每一个阶段执行完毕，此方法会被自动调用，因此，重载此方法写入的代码会在每个阶段执行完毕时执行，
  相当于CyclicBarrier的barrierAction。
 2、当此方法返回true时，意味着Phaser被终止，因此可以巧妙的设置此方法的返回值来终止所有线程。

比cyclicbarrer更加灵活

3、重写Phaser
@Override[几个屏障 一目了然]
protected boolean onAdvance(int phase, int registeredParties) {
switch (phase) {
case 0:
return studentArrived();
case 1:
return finishFirstExercise();
case 2:
return finishSecondExercise();
case 3:
return finishExam();
default:
return true;
}
