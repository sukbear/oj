内部类是一个编译时的概念，一旦编译成功，就会成为完全不同的两类。
  分类
内部类可以分为：静态内部类（嵌套类）和非静态内部类。
非静态内部类又可以分为：成员内部类、方法（局部）内部类、匿名内部类。
内部类如何访问外部类的成员

 1 编译器自动为内部类添加一个成员变量， 这个成员变量的类型和外部类的类型相同， 这个成员变量就是指向外部类对象的引用；

 2 编译器自动为内部类的构造方法添加一个参数， 参数的类型是外部类的类型， 在构造方法内部使用这个参数为1中添加的成员变量赋值；

 3 在调用内部类的构造函数初始化内部类对象时， 会默认传入外部类的引用。


静态内部类和非静态内部类的区别

静态内部类可以有静态成员，而非静态内部类则不能有静态成员。
静态内部类可以访问外部类的静态变量，而不可访问外部类的非静态变量；
静态内部类的创建不依赖于外部类，而非静态内部类必须依赖于外部类的创建而创建。
//
内部类的好处
内部类方法可以访问该类定义所在作用域中的数据，包括被 private 修饰的私有数据
内部类可以对同一包中的其他类隐藏起来
内部类可以实现 java 单继承的缺陷
当我们想要定义一个回调函数却不想写大量代码的时候我们可以选择使用匿名内部类来实现
// 内部类和外部类的关系
对于非静态内部类，内部类的创建依赖外部类的实例对象，
在没有外部类实例之前是无法创建内部类的
内部类是一个相对独立的实体，与外部类不是is-a关系
创建内部类的时刻并不依赖于外部类的创建

//
当外部类的成员和内部类的成员重名时单单用this是区分不了的。
在内部类中访问外部类的成员时可以用如下语法区分
<外部类类名>.this.<外部类中需要被访问的成员名>;